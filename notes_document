192.168.65.10, 10.50.33.177 (WINDOWS)
192.168.65.20, 10.50.38.49 (LINUX)


                                                                        DAY 1
-----------------------------------------------------------------------------------------------------------------------------------------------------------

type() function
    will print the data type declared in parenthesis
    print(type(3))

list() function (mutable)
  displays the list of a variable declared inside parenthesis
[0]  being first element
[-1] being last element, -2 second to last, so on

tuple() function (immutable)
  () instead of [] (list)

changing a variable
usmc = "marines"
  usmc = list(usmc)
del usmc[0]  (will print "arines")
usmc.append('321')  (will add 321 to the end of "arines")

brace expansion
  print('{} {}'.format(var1,var2))    prints var1 and var2

split() function
  will split strings at declared string inside parenthesis
  gives a list, can index from split() function
  'user:password'.split(:)
    will give ['user' 'password']

email = 'last@domain.com'
hello = []
a = email.split('@')[0]
b = (email.split('@')[1]).split('.')                  #### prints ['last','domain','com'] ####
hello.append(a)
hello.append(b[0])
hello.append(b[1])

print(hello)


print(('.'.join(email.split('@'))).split('.'))      #### also prints ['last','domain','com'] ####


join() function
  


REPL - the 3 gators when you do the python command thingy

---------------------------------------------------------------------DAY 2--------------------------------------------------------------------------------------
while True:
    usr = input('Type pass, continue, or break').lower()
    if usr == 'pass':
        pass
        print('This is pass')
    elif usr == 'continue':
        continue
        print('This is continue')
    elif usr == 'break':
        break
        print('This is break')
    else:
        print('Wrong')

def makedeck():
  deck = []
  suits = ['\u2660','\u2665','\u2666','\u2663']
  ranks = ['A',2,3,4,5,6,7,8,9,10,'J','Q','K']
  for suit in suits:
    for rank in ranks:
      deck.append('{}{}'.format(rank,suit))
  print(deck)

makedeck()



---------------------------------------------------------------------DAY 3--------------------------------------------------------------------------------------

slicing - start stop step
list[::]
list[::-1] - prints list in reverse

ord ordinal
ord('a') - returns the number associated with the character in ASCII

dictionaries = {}
romanNumerals = {'I':1, 'V':5, 'X':10, 'L':50}
romanNumerals['V'] - will print 5


####OPENING A FILE####
with open("test.txt") as fp:
    pass

write(string)
Writes the contents of string to the file

writelines(lines)
Write all lines in a file including newline '\n' into a list

with open ("test.txt", 'w') as fp:
  fp.write('First line\n')                                    #### ADDS TEXT TO TEXT DOCUMENT 'TEST.TXT' ####
  lines = ['Second line\n', 'Third line\n']
  fp.writelines(lines)

with open("test.txt) as fp:
  fp.read()                                                  #### READ THE CONENTS OF TEST.TXT ####


f = open('school_prompt.txt', 'r')
beginning_chars = f.read(30)                                #### READS FIRST 30 CHARACTERS IN SCHOOL_PROMPT.TXT ####
print(beginning_chars)

num_words = 0
fileref = "emotion_words.txt"

with open(fileref, 'r') as file:
    for line in file:                                      #### FINDS TOTAL NUMBER OF WORDS IN FILE AND ASSIGNS TO
        num_words += len(line.split())                          VARIABLE NUM_WORDS ####


num = 0
with open('travel_plans.txt') as fp:                      #### FINDS TOTAL NUMBER OF CHARACTERS IN FILE AND ASSIGNS TO
    num = (len(fp.read()))                                     VARIABLE NUM ####


emotions=[]
op = open('emotion_words.txt','a')                        #### TAKES FIRST WORDS IN EVERY LINE IN EMOTION_WORDS.TXT
for i in op:                                                   AND PUTS IT IN A LIST ####
    k = i.split()
    emotions.append(k[0])


                                #### PRACTICE EXAM QUESTIONS AND ANSWERS ####



def q1(floatstr)
 Given the floatstr, which is a comma separated string of
  7     floats, return a list with each of the floats in the 
  8     argument as elements in the list.
  9     '''
 10     floats_list = [float(num) for num in floatstr.split(',')]
 11     return floats_list
 12     pass


14 def q2(*args):
 15     '''
 16     TLO: 112-SCRPY006, LSA 3
 17     TLO: 112-SCRPY007, LSA 4
 18     Given the variable length argument list, return the average
 19     of all the arguments as a float
 20     '''
 21     total = sum(args)
 22     count = len(args)
 23     if count > 0:
 24         avg = total / count
 25         return avg
 26     else:
 27         return 0.0
 28     pass
 29     


 30 def q3(lst,n):
 31     '''
 32     TLO: 112-SCRPY004, LSA 3
 33     Given a list (lst) and a number of items (n), return a new 
 34     list containing the last n entries in lst.
 35     '''
 36     return lst[-n:]
 37     pass


    
def q4(strng):
    '''
    Given an input string, return a list containing the ordinal numbers of 
    each character in the string in the order found in the input string.
    '''
    return [ord(x) for x in list(strng)]
    # return list(map(ord,strng))

def q5(strng):
    '''
    Given an input string, return a tuple with each element in the tuple
    containing a single word from the input string in order.
    '''
    return tuple(strng.split())

def q6(): *************************************
    '''
    Given an input string similar to the below, craft a regular expression  
    pattern to match and extract the date, time, and temperature in groups  
    and return this pattern. Samples given below.
    Date: 12/31/1999 Time: 11:59 p.m. Temperature: 44 F
    Date: 01/01/2000 Time: 12:01 a.m. Temperature: 5.2 C
    '''
    #pat = r"Date:\s+([0-9]+/[0-9]+/[0-9]+)\s+Time:\s+([0-9]+:[0-9]+\s[a|p]\.m\.)\s+Temperature:\s+([0-9.]+\s[KkFfCc])"
    pat = r"Date: (\d+/\d+/\d+) Time: (\d+:\d+ .\.m\.) Temperature: ([\d\.]+ [FfCc])"
    return pat




 59 def q6(catalog, order):
 60     '''
 61     TLO: 112-SCRPY007, LSA 2
 62     Given a dictionary (catalog) whose keys are product names and values are product
 63     prices per unit and a list of tuples (order) of product names and quantities,
 64     compute and return the total value of the order.
 65 
 66     Example catalog:
 67     {
 68         'AMD Ryzen 5 5600X': 289.99,
 69         'Intel Core i9-9900K': 363.50,
 70         'AMD Ryzen 9 5900X': 569.99
 71     }
 72 
 73     Example order:
 74     [
 75         ('AMD Ryzen 5 5600X', 5), 
 76         ('Intel Core i9-9900K', 3)
 77     ]
 78 
 79     Example result:
 80     2540.45 
 81 
 82     How the above result was computed:
 83     (289.99 * 5) + (363.50 * 3)
 84     '''
 85     total = 0
 86     for product, quantity in order:
 87         if product in catalog:
 88             total += catalog[product] * quantity
 89         else:
 90             print(f"Product '{product}' not found in catalog.")
 91     return total
 92 
 93     pass




def q7(filename):
    '''
    Given a filename, open the file and return the length of the first line 
    in the file excluding the line terminator.
    '''
    with open(filename) as fp:
        return len(fp.readline()) - 1 #Line terminator
    # return len(fp.readline()) - 1 if line[-1] == '\n' else 0

def q8(filename,lst):
    '''
    Given a filename and a list, write each entry from the list to the file
    on separate lines until a case-insensitive entry of "stop" is found in 
    the list. If "stop" is not found in the list, write the entire list to 
    the file on separate lines.
    '''
    #'''
    with open(filename, 'w') as fp:
        for item in lst:
            if item.lower() == 'stop':
                break
            fp.write('{}\n'.format(item))
    #'''

def q9(miltime):
    '''
    Given the military time in the argument miltime, return a string 
    containing the greeting of the day.
    0300-1159 "Good Morning"
    1200-1559 "Good Afternoon"
    1600-2059 "Good Evening"
    2100-0259 "Good Night"
    '''
    if miltime >= 301 and miltime < 1200:
        return "Good Morning"
    elif miltime >= 1200 and miltime < 1600:
        return "Good Afternoon"
    elif miltime >= 1600 and miltime < 2100:
        return "Good Evening"
    elif miltime >= 2100 or miltime < 300:
        return "Good Night"

    #if 300 <= miltime <= 1159:
    #   return 'Good Morning'
    #if 1200 <= miltime <= 1559:
    #   return 'Good Afternoon'
    #if 1600 <= miltime <= 2059:
    #   return 'Good Evening'
    #return 'Good Night'
    
def q10(numlist):
    '''
    Given the argument numlist as a list of numbers, return True if all 
    numbers in the list are NOT negative. If any numbers in the list are
    negative, return False.
    '''
    for i in numlist:
        if i < 0:
            return False
    return True
    # return all(map(lambda x: x >= 0, numlist))


===================================================================== BASH =========================================================================
touch -t yymmddhhmm.ss 
  change modification time
mkdir -p
  creates parent directory
umask
  default permissions
rm -rf
  remove recursively forcefully
ls ~/*.log
  finds everything .log in the home directory
locate
  find files by name
find           (-iname -name -inum -size -gid -uid -maxdepth)
  -maxdepth - how deep itll go into directories
  -inum - inode number
  search or files in a directory hierarchy
  find / -type s -exec echo {} 2>/dev/null \; | grep domain*
        some trash idk


time = days
  a - accessed
  c - changed
  m - modified

find -cmin -30
finds everything changed in the last 30 minutes


find /var/log/ -iname *.log -exec ls -al {} 2>/dev/null \;
  finds .log files in /var/log then executes ls -al on everything found

find [path] [arguments] -exec [command] {} \;
find [path] [arguments] -exec [command] {} +

\; - for each found result, the command is executed
+ - for every result of the find command, the command is executed only once

find . -maxdepth 0 -type d
  finds directories in your current working location
number indicated how many directories deep it will go

grep
egrep

grep -v 
  inverted search (find everything but this)
cat /etc/passwd | grep /bin/bash
  finds who gets a shell

mkdir someting{11,22,33,44}
  makes 4 directories, something11 something22 something33 something44


mkdir 11{23,34,45,56} - makes 4 directories, 1123 1134 1145 1156

mkdir 1123
cd 1123
touch {1,2,3,4,5,6~,7~,8~,9~}.txt - makes 9 documents in directory 1123

find ~/1123 -name *.txt - finds all files in home/1123 that end in .txt

find ~/1123 -name *.txt | grep -v '~' - finds all files in home/1123 that end in .txt and omits files containing
                                        the ~ character

find $HOME/1123 -type f -name "*.txt" ! -name "*~*" -exec cp {} $HOME/CUT \; - copies 1123 that end in .txt with no ~
                                                                               and copies it to /CUT directory

find /var -empty -printf '%i %f\n' - finds all empty files/directories in /var and prints out only the filename and
                                     the inode number separated by newlines

find / -inum 4026532575 -printf '%i %f\n' - finds all files with inode 4026532575 and print only the filename to 
                                            the screen

cut -d: -f1 passwd - gives field 1 of passwd
cut -d: -f1- -s passwd - everything without a colon?
cut -d: -f2-4 passwd - gives fields 2 - 4 of passwd 

ls -p $HOME/CUT | grep -v '/$' | grep -E '\..+$' | cut -d '/' -f 2 > $HOME/CUT/names


    Using only the ls -l and cut Commands, write a BASH script that shows all filenames with extensions ie: 1.txt, etc., but no directories, in $HOME/CUT.
    Write those to a text file called names in $HOME/CUT directory.
    Omit the names filename from your output.



tail /etc/passwd | awk -F: '{print $1}'
      prints out the first column of /etc/passwd (whatever after the -F is the delimeter)

awk -F: '{print $1,$3,$4}
  [prints first third and fourth

'{print $NF}' - prints the last field


sort 
  sorts
-n - numerically
-u - uniquely
-nr - numerically reversed

ps aux | sort -k 1 
  -k - columns (column 1 in previous example)

grep -oE "\b([0-9]{1,3}\.){3}[0-9]{1,3}\b" StoryHiddenIPs | sort | uniq -c | sort -rn
  grabs IP addresses in StoryHiddenIPs and sorts them uniquely by number of times they appear

awk -F: '$3 >= 4 && $3 != 0 && $7 == "/bin/bash" {print $1}' "$HOME/passwd" > "$HOME/SED/names.txt"
  shows users in passwd with uid greater than or equal to 4 and default shell as /bin/bash and writes it to /names.txt

### EXAMPLE IF BRANCHING IN BASH ###

#!/bin/bash
if [[ -f /etc/passwd]]; then
  echo "/etc/passwd file exists"
elif [[ ! -f /etc/passwd]]; then
  echo "/etc/passwd file doesnt exist"
fi

if [[ 3129 == $((15645/5)) ]]; then
  echo "math"
elif [[ 3129 != $((15645/5)) ]]; then
  echo "trash"
fi

if [[ 41 == 42 ]]; then
  echo "41 is 42";
else
  echo "41 is not 42";
fi

-e expression for multiple sed patterns
S substitution start pattern
g global (lowercase)
d (lowercase) deleted
$ end of line

sed -e 's/chicken/hamburger/g' -e 's/pepperoni/sausage/' pizza.txt
(everywhere theres chicken replace with hamburger)
(replace the first instance of pepperoniand replace it with sausage(no /g))
  

#### DECLARING A VARIABLE AND PRINTS IT ####
#### COMMAND SUBSTITUTION ####

A = $(cat /etc/passwd)
echo $A

A = $(find /usr/bin -name passwd)
echo $A
echo md5sum $A
echo file $A

















