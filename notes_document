192.168.65.10, 10.50.33.177 (WINDOWS)
192.168.65.20, 10.50.38.49 (LINUX)


                                                                        DAY 1
-----------------------------------------------------------------------------------------------------------------------------------------------------------

type() function
    will print the data type declared in parenthesis
    print(type(3))

list() function (mutable)
  displays the list of a variable declared inside parenthesis
[0]  being first element
[-1] being last element, -2 second to last, so on

tuple() function (immutable)
  () instead of [] (list)

changing a variable
usmc = "marines"
  usmc = list(usmc)
del usmc[0]  (will print "arines")
usmc.append('321')  (will add 321 to the end of "arines")

brace expansion
  print('{} {}'.format(var1,var2))    prints var1 and var2

split() function
  will split strings at declared string inside parenthesis
  gives a list, can index from split() function
  'user:password'.split(:)
    will give ['user' 'password']

email = 'last@domain.com'
hello = []
a = email.split('@')[0]
b = (email.split('@')[1]).split('.')                  #### prints ['last','domain','com'] ####
hello.append(a)
hello.append(b[0])
hello.append(b[1])

print(hello)


print(('.'.join(email.split('@'))).split('.'))      #### also prints ['last','domain','com'] ####


join() function
  


REPL - the 3 gators when you do the python command thingy

---------------------------------------------------------------------DAY 2--------------------------------------------------------------------------------------
while True:
    usr = input('Type pass, continue, or break').lower()
    if usr == 'pass':
        pass
        print('This is pass')
    elif usr == 'continue':
        continue
        print('This is continue')
    elif usr == 'break':
        break
        print('This is break')
    else:
        print('Wrong')

def makedeck():
  deck = []
  suits = ['\u2660','\u2665','\u2666','\u2663']
  ranks = ['A',2,3,4,5,6,7,8,9,10,'J','Q','K']
  for suit in suits:
    for rank in ranks:
      deck.append('{}{}'.format(rank,suit))
  print(deck)

makedeck()



---------------------------------------------------------------------DAY 3--------------------------------------------------------------------------------------

slicing - start stop step
list[::]
list[::-1] - prints list in reverse

ord ordinal
ord('a') - returns the number associated with the character in ASCII

dictionaries = {}
romanNumerals = {'I':1, 'V':5, 'X':10, 'L':50}
romanNumerals['V'] - will print 5


####OPENING A FILE####
with open("test.txt") as fp:
    pass

write(string)
Writes the contents of string to the file

writelines(lines)
Write all lines in a file including newline '\n' into a list

with open ("test.txt", 'w') as fp:
  fp.write('First line\n')                                    #### ADDS TEXT TO TEXT DOCUMENT 'TEST.TXT' ####
  lines = ['Second line\n', 'Third line\n']
  fp.writelines(lines)

with open("test.txt) as fp:
  fp.read()                                                  #### READ THE CONENTS OF TEST.TXT ####


f = open('school_prompt.txt', 'r')
beginning_chars = f.read(30)                                #### READS FIRST 30 CHARACTERS IN SCHOOL_PROMPT.TXT ####
print(beginning_chars)

num_words = 0
fileref = "emotion_words.txt"

with open(fileref, 'r') as file:
    for line in file:                                      #### FINDS TOTAL NUMBER OF WORDS IN FILE AND ASSIGNS TO
        num_words += len(line.split())                          VARIABLE NUM_WORDS ####


num = 0
with open('travel_plans.txt') as fp:                      #### FINDS TOTAL NUMBER OF CHARACTERS IN FILE AND ASSIGNS TO
    num = (len(fp.read()))                                     VARIABLE NUM ####


emotions=[]
op = open('emotion_words.txt','a')                        #### TAKES FIRST WORDS IN EVERY LINE IN EMOTION_WORDS.TXT
for i in op:                                                   AND PUTS IT IN A LIST ####
    k = i.split()
    emotions.append(k[0])








